
#
# Mnemonic Maps
#
mmap new  -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new  -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

array unset createdGroup
array set createdGroup {}
#
# Groups
#
if {[catch {group get -using [list {Group 1}]}]} {
set createdGroup([list {Group 1}]) 1
catch {group new -name {Group 1} -overlay 0}
}
if {[catch {group get -using [list {Group 2}]}]} {
set createdGroup([list {Group 2}]) 1
catch {group new -name {Group 2} -overlay 0}
}
if {[info exists createdGroup([list {Group 1}])]} {
group using {Group 1}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {r_top.hinf[2].dwr[31:0]}]} ] \
    [subst  {[format {r_top.hinf[2].drd[31:0]}]} ] \
    [subst  {[format {r_top.hinf[2].cpu}]} ] \
    [subst  {[format {r_top.hinf[2].be[3:0]}]} ] \
    [subst  {[format {r_top.hinf[2].addr[31:0]}]} ]
}

if {[info exists createdGroup([list {Group 2}])]} {
group using {Group 2}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {r_top.hinf[3].addr[31:0]}]} ] \
    [subst  {[format {r_top.hinf[3].be[3:0]}]} ] \
    [subst  {[format {r_top.hinf[3].cpu}]} ] \
    [subst  {[format {r_top.hinf[3].drd[31:0]}]} ] \
    [subst  {[format {r_top.hinf[3].dwr[31:0]}]} ]
}

set id [waveform add -signals [subst  {
	{[format {r_top.hinf[3].clk}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[3].reset_n}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[3].ack[1:0]}]}
	} ]]
waveform format $id -color #ff0099
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[3].rd}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[3].wr}]}
	} ]]

set groupId0 [waveform add -groups {{Group 2}}]
waveform hierarchy collapse $groupId0

set id [waveform add -cdivider divider]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[2].clk}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[2].reset_n}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[2].ack[1:0]}]}
	} ]]
waveform format $id -color #ff0099
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[2].rd}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[2].wr}]}
	} ]]

set groupId0 [waveform add -groups {{Group 1}}]
waveform hierarchy collapse $groupId0

set id [waveform add -cdivider divider]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].clk}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].reset_n}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].ack[1:0]}]}
	} ]]
waveform format $id -color #ff0099
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].rd}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].wr}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].addr[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].be[3:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].cpu}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].drd[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[1].dwr[31:0]}]}
	} ]]
set id [waveform add -cdivider divider]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].clk}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].reset_n}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].ack[1:0]}]}
	} ]]
waveform format $id -color #ff0099
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].rd}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].wr}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].addr[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].be[3:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].cpu}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].drd[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.hinf[0].dwr[31:0]}]}
	} ]]
set id [waveform add -cdivider divider]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.clk}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.reset_n}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.ack_bus}]}
	} ]]
waveform format $id -color #ff0099
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.rd_bus}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.wr_bus}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.add_bus[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.byte_en[3:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.cpu_out}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.data_bus_rd[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {r_top.sinf.data_bus_wr[31:0]}]}
	} ]]

waveform xview limits 0 745ns
